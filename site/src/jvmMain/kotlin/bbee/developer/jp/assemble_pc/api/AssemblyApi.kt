package bbee.developer.jp.assemble_pc.api

import bbee.developer.jp.assemble_pc.api.util.getBody
import bbee.developer.jp.assemble_pc.api.util.getUid
import bbee.developer.jp.assemble_pc.api.util.onFailureCommonResponse
import bbee.developer.jp.assemble_pc.api.util.setBody
import bbee.developer.jp.assemble_pc.database.H2DB
import bbee.developer.jp.assemble_pc.models.Assembly
import bbee.developer.jp.assemble_pc.models.AssemblyForPost
import bbee.developer.jp.assemble_pc.models.AssemblyId
import bbee.developer.jp.assemble_pc.util.currentDateTime
import bbee.developer.jp.assemble_pc.util.toDateTimeString
import com.varabyte.kobweb.api.Api
import com.varabyte.kobweb.api.ApiContext
import com.varabyte.kobweb.api.data.getValue
import java.util.UUID

@Api(routeOverride = "get_current_assembly")
suspend fun getCurrentAssembly(context: ApiContext) {
    context.runCatching {
        getUid().also { uid ->
            data.getValue<H2DB>().getCurrentAssembly(uid).also { result ->
                res.setBody(result)
            }
        }
    }.onFailureCommonResponse(context = context, functionName = "getCurrentAssembly")
}

@Api(routeOverride = "create_assembly")
suspend fun createAssembly(context: ApiContext) {
    context.runCatching {
        getUid().also { uid ->
            (req.params["assemblyName"] ?: "").also { assemblyName ->
                req.params["referenceAssemblyId"].also { refId ->
                    logger.debug("assemblyName=$assemblyName")
                    Assembly(
                        assemblyId = AssemblyId(0), // not use (generated by DB)
                        ownerUserId = uid,
                        assemblyName = assemblyName,
                        assemblyUrl = UUID.randomUUID().toString(),
                        ownerName = null,
                        ownerComment = "",
                        referenceAssemblyId = refId?.toIntOrNull()?.let { AssemblyId(it) } ,
                        published = false,
                        publishedDate = currentDateTime.toDateTimeString(),
                        assemblyDetails = emptyList(),
                        favoriteCount = 0,
                    ).also { assembly ->
                        data.getValue<H2DB>().addAssembly(uid, assembly).also { isSuccess ->
                            if (isSuccess) {
                                getCurrentAssembly(context = context)
                            } else {
                                res.setBody(isSuccess) // TODO Wrap ApiResponse.Failure sealed class
                            }
                        }
                    }
                }
            }
        }
    }.onFailureCommonResponse(context = context, functionName = "createAssembly")
}

@Api(routeOverride = "update_assembly")
suspend fun updateAssembly(context: ApiContext) {
    context.runCatching {
        getUid().also { uid ->
            req.getBody<Assembly>()?.also { assembly ->
                if (uid != assembly.ownerUserId) throw IllegalArgumentException("You are not owner")

                data.getValue<H2DB>().updateAssembly(assembly).also { result ->
                    res.setBody(result)
                }
            }
        }
    }.onFailureCommonResponse(context = context, functionName = "updateAssembly")
}

@Api(routeOverride = "delete_assembly")
suspend fun deleteAssembly(context: ApiContext) {
    context.runCatching {
        getUid().also { uid ->
            req.getBody<Assembly>()?.also { assembly ->
                if (uid != assembly.ownerUserId) throw IllegalArgumentException("You are not owner")

                data.getValue<H2DB>().deleteAssembly(assembly.assemblyId).also { result ->
                    res.setBody(result)
                }
            }
        }
    }.onFailureCommonResponse(context = context, functionName = "deleteAssembly")
}

@Api(routeOverride = "add_assembly_detail")
suspend fun addAssemblyDetail(context: ApiContext) {
    context.runCatching {
        getUid().also { uid ->
            req.getBody<AssemblyForPost>()?.also { assembly ->
                if (uid != assembly.ownerUserId) throw IllegalArgumentException("You are not owner")

                data.getValue<H2DB>().addAssemblyDetail(
                    uid = uid,
                    assemblyId = assembly.assemblyId,
                    detail = assembly.assemblyDetail
                ).also { isSuccess ->
                    if (isSuccess) {
                        getCurrentAssembly(context = context)
                    } else {
                        res.setBody(isSuccess) // TODO Wrap ApiResponse.Failure sealed class
                    }
                }
            }
        }
    }.onFailureCommonResponse(context = context, functionName = "addAssemblyDetail")
}

@Api(routeOverride = "update_assembly_detail")
suspend fun updateAssemblyDetail(context: ApiContext) {
    context.runCatching {
        getUid().also { uid ->
            req.getBody<AssemblyForPost>()?.also { assembly ->
                if (uid != assembly.ownerUserId) throw IllegalArgumentException("You are not owner")
                val detail = assembly.assemblyDetail

                data.getValue<H2DB>().updateAssemblyDetail(
                    detailId = requireNotNull(detail.detailId),
                    detail = detail,
                ).also { isSuccess ->
                    if (isSuccess) {
                        getCurrentAssembly(context = context)
                    } else {
                        res.setBody(isSuccess) // TODO Wrap ApiResponse.Failure sealed class
                    }
                }
            }
        }
    }.onFailureCommonResponse(context = context, functionName = "updateAssemblyDetail")
}

@Api(routeOverride = "delete_assembly_detail")
suspend fun deleteAssemblyDetail(context: ApiContext) {
    context.runCatching {
        getUid().also { uid ->
            req.getBody<AssemblyForPost>()?.also { assembly ->
                if (uid != assembly.ownerUserId) throw IllegalArgumentException("You are not owner")
                val detailIds = requireNotNull(assembly.assemblyDetail.detailId)

                data.getValue<H2DB>().deleteAssemblyDetails(
                    detailIds = listOf(detailIds)
                ).also { isSuccess ->
                    res.setBody(isSuccess)
                }
            }
        }
    }.onFailureCommonResponse(context = context, functionName = "deleteAssemblyDetail")
}

@Api(routeOverride = "delete_assembly_details")
suspend fun deleteAssemblyDetails(context: ApiContext) {
    context.runCatching {
        getUid().also { uid ->
            req.getBody<Assembly>()?.also { assembly ->
                if (uid != assembly.ownerUserId) throw IllegalArgumentException("You are not owner")
                val detailIds = assembly.assemblyDetails.map { requireNotNull(it.detailId) }

                data.getValue<H2DB>().deleteAssemblyDetails(
                    detailIds = detailIds,
                ).also { isSuccess ->
                    if (isSuccess) {
                        getCurrentAssembly(context = context)
                    } else {
                        res.setBody(isSuccess) // TODO Wrap ApiResponse.Failure sealed class
                    }
                }
            }
        }
    }.onFailureCommonResponse(context = context, functionName = "deleteAssemblyDetails")
}

@Api(routeOverride = "get_my_published_assemblies")
suspend fun getMyPublishedAssemblies(context: ApiContext) {
    context.runCatching {
        getUid().also { uid ->
            req.params.getOrDefault("skip", "0").toLongOrNull().also { skip ->
                data.getValue<H2DB>()
                    .getAssemblies(uid = uid, skip = skip ?: 0L, own = true, published = true)
                    .also { result -> res.setBody(result) }
            }
        }
    }.onFailureCommonResponse(context = context, functionName = "getMyPublishedAssemblies")
}

@Api(routeOverride = "get_my_unpublished_assemblies")
suspend fun getMyUnpublishedAssemblies(context: ApiContext) {
    context.runCatching {
        getUid().also { uid ->
            req.params.getOrDefault("skip", "0").toLongOrNull().also { skip ->
                data.getValue<H2DB>()
                    .getAssemblies(uid = uid, skip = skip ?: 0L, own = true, published = false)
                    .also { result -> res.setBody(result) }
            }
        }
    }.onFailureCommonResponse(context = context, functionName = "getMyPublishedAssemblies")
}

@Api(routeOverride = "get_published_assemblies")
suspend fun getPublishedAssemblies(context: ApiContext) {
    context.runCatching {
        getUid().also { uid ->
            req.params.getOrDefault("skip", "0").toLongOrNull().also { skip ->
                data.getValue<H2DB>()
                    .getAssemblies(uid = uid, skip = skip ?: 0L, own = false, published = true)
                    .also { result -> res.setBody(result) }
            }
        }
    }.onFailureCommonResponse(context = context, functionName = "getPublishedAssemblies")
}

@Api(routeOverride = "get_my_favorite_assembly_id_list")
suspend fun getMyFavoriteAssemblyIdList(context: ApiContext) {
    context.runCatching {
        getUid().also { uid ->
            data.getValue<H2DB>().getMyFavoriteAssemblyIdList(uid)
                .also { list -> res.setBody(list) }
        }
    }.onFailureCommonResponse(context = context, functionName = "getMyFavoriteAssemblyIdList")
}

@Api(routeOverride = "get_my_favorite_assemblies")
suspend fun getMyFavoriteAssemblies(context: ApiContext) {
    context.runCatching {
        getUid().also { uid ->
            req.params.getOrDefault("skip", "0").toLongOrNull().also { skip ->
                data.getValue<H2DB>()
                    .getAssemblies(uid = uid, skip = skip ?: 0L, own = false, published = true, favoriteOnly = true)
                    .also { list -> res.setBody(list) }
            }
        }
    }.onFailureCommonResponse(context = context, functionName = "getMyFavoriteAssemblies")
}
